### Max time (max # monte carlo steps) ###
# takes about 1hour per 100000 timesteps
#mcs = 200000000
mcs = 20000000

# this now only controls when to output info to the terminal
season_duration = 30000

### grid size ###
sizex = 250
sizey = 250



###############################
## Cellular Potts parameters ##
###############################

## Hamiltonian parameters ##

T = 16

# neigh = 2 is Moore neigh (#set neighbours to 1 to avoid predators from eating beyond contact <- NO)
neighbours = 2
conn_diss = 0			#whether to penalise loose pixels
#unclear, only in deltaH
vecadherinknockout = false
chemotaxis = 0			#For normal PDE-based chemotaxis
#no longer active, for Compucell type extension based chemotaxis 
extensiononly = false
border_energy = 100		
rseed = 78213 # rseed deafult = -1, randomises the seed, any natural number is used as seed
# chancemediumcopied is the chance that instead of copying a pixel with another, cells copy medium from outer space was 0.0001
chancemediumcopied = 0.0001  # 0.0
subfield = 1.0
relaxation = 0

target_length = 0
lambda = 4
lambda2 = 0

#migration parameters
#make startmu = 0 #for no persistent movement
#default startmu = 0.0 or 3.0
startmu = 3.0
#default = 50
persduration = 50
init_chemmu = 1.0 #chemotaxis strength

## Cell Parameters ##

# set the target area to half_div_area
target_area = 50

#Division area
#half_div_area = 100
half_div_area = 500
#division area for predators, set to -1 if you don't want to use
half_div_area_2 = -1

# min_area_for_life is the minimum area below which we set a cell to apoptose and remove, default 5
min_area_for_life = 4

## Adhesion ##

# Determines adhesion strength with the medium
Jmed = 14
# Term in the Jcell_cell adhesion equation
Jalpha = 7

# Determines the length of the key and of the lock
key_lock_len = 6
# This determines the weights with which to multiply the matching positions between cell's keys and locks
# The number of digits should match key_lock_len parameter
key_lock_weights = 1 2 3 4 5 6

#######################
## Genome Regulation ##
## of Cell Behaviour ##
#######################

#genomefile = /home/aleferna/CProjects/Projects/regulation_evolution/runs/test/networkdir_
# Should be around numberofoutputnodes + 1
nr_regnodes = 14
divtime = 20	# scaled nr of steps before a cell initiates division
divdur = 1000     # duration of division, during which a cell stops moving
scaling_cell_to_ca_time = 20  # scaling factor for: freq update food plane, predation, feeding and growth/divide

########################
## initial conditions ##
########################

howmany_makeit_for_nextgen = 100
popsize = 100

n_init_cells = 30
size_init_cells = 25

#Initial configuration of cells, see ca.cpp placecellsorderly()
init_cell_config = 0

#leave division to 0, this seems buggy. Starts with mega cell that then divides
divisions = 0

###################
## End of season ##
###################

#radius of the box for cells that make it to next generation
the_line = 20

#if true, persdur is set to zero when line is reached
#please don't use this
zero_persistence_past_theline = 0

##########################
## Evolution parameters ##
##########################

#mutrate, typical length of key and lock is 10+10 -> 20*0.01=0.2 one mutation every 5 replications...
#these days k+l=50 -> 50*0.01=0.5 (one mutation every two replications)
#mut_rate = 0.01
mut_rate = 0.01
evolsim = 1
evolreg = true

#genome mutation
mu = 0.1
mustd = 0.05

#should cells be scattered at the start of the simulation?
scatter_start = true

#death rates for different cell types
motiledeath = 0.5
dividingdeath = 0.5

# Gompertz law parameters for random killing of cells (asynchronous)
gompertz_alpha = 0.0000075
# You can set the beta parameter to 0 to have a uniform probability of
# death (independent of age) defined by gompertz_alpha
gompertz_beta = 0.0004

# PDE parameters (irrelevant for this simulation)
n_chem = 0

##########################
### IntPlane parameter ###
##########################

#food_influx_location options: everywhere, notonprey, nowhere, patchy, somewhere, somewhere_notonprey, patchy_random, patchy_random_persistence, food_growth, specified_experiment,boundarygradient
# notice that nowhere zeroes foodinflux
food_influx_location = specified_experiment
gradnoise = 1.0
# Diameter for a cell with area = 50 is approx. 10
# gradscale = 100 / gradient_step_size
# gradscale = 5 results in steps that are approx. double the diameter of the cells (assuming t_area = 50)
gradscale = 5
# Initial number of food patches resources placed in the field
foodpatches = 5
# New food patch timer (a new patch will be created at most every X MCS, less frequently if there is food on the lattice already)
foodpatchperiod = 3000
# Side of each food patch (total amount of spots per patch will be this squared)
foodpatchlength = 10
# How much food each spot contains
# A normal range for the total food of the patch is 100_000 - 1_000_000, so calculate from that
foodperspot = 20
# Max food allowed in the system (regulates foodpatchperiod)
maxfood = 16000
# How much food does each cell start with?
foodstart = 2000
# How often in MCS we deduct 1 food from each cell
metabperiod = 100
# How often in MCS is a cell allowed to eat 1 food
eatperiod = 10

# only used in specified_experiment, if true it puts 1 food randomly, with probability foodinflux = 0.05
is_there_food = 0
team
# The params bellow might be out of use?
# default growth = 10.
growth = 0.
# default ardecay = 0.5
# ardecay = 0.1
ardecay = 0.0
#ardecay = 0.05

##########################
## Predation parameters ##
##########################

## NOT CURRENTLY USED
#default min_contact_duration_for_preying = 25
min_contact_duration_for_preying = 25
# default frac_contlen_eaten = 1.0
frac_contlen_eaten = 1.0
# default metabolic_conversion prey -> predator = 0.5
metabolic_conversion = 0.5


############
## output ##
############

graphics = false
store = true
divisioncolour = true
storage_stride = 500
moviedir = ../runs/data_film2
save_data_period = 10000
celldatafile = ../runs/data_cellcount.txt
save_lattice_period = 10000
latticedir = ../runs/backup

#if readcolortable is true, it reads the color table from "colortable_filename", otherwise it generates a pretty one internally
readcolortable = true
colortable_filename = ../data/colortable.ctb
# Which plots to make, specified as a space-delimited string
# Possible values for the list are: tau food
plots = tau food
